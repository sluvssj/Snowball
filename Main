-- Snowball Auto Parry [@dtbsnt]

if getgenv().executed then return end

local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local LocalPlayer = game:GetService("Players").LocalPlayer
local Balls = game:GetService("Workspace").Balls

local ballRangeDisplay = nil
local ballRange = 0

local canParry = true

function FindBall()
    local RealBall

    for i, v in pairs(Balls:GetChildren()) do
        if v:GetAttribute("realBall") == true then
            RealBall = v
        end
    end
    return RealBall
end
function FindOtherBall()
    local OtherBall

    for i, v in pairs(Balls:GetChildren()) do
        if v:GetAttribute("realBall") ~= true then
            OtherBall = v
        end
    end
    return OtherBall
end

local Saved = {
	LastTick = os.clock();
	LastBallPosition = nil;
	LastPrediction = 0;
	LastTracer = nil;
	CurrentMethod = "Universal";
};

local function AttemptParry()
	ReplicatedStorage.Remotes.ParryButtonPress:Fire()
end

local function setup(Character)
	Character:WaitForChild("HumanoidRootPart")
	if ballRangeDisplay then ballRangeDisplay:Destroy() end
	ballRangeDisplay = Instance.new("Part")
	
	ballRangeDisplay.Material = Enum.Material.ForceField
	ballRangeDisplay.Transparency = 0.825
	ballRangeDisplay.CanCollide = false
	ballRangeDisplay.Size = Vector3.new(5,5,5)
	ballRangeDisplay.Color = Color3.fromRGB(255,255,255)
	ballRangeDisplay.Shape = Enum.PartType.Ball
	
	ballRangeDisplay.Parent = game:GetService("Workspace")
	local TBallRangeDisplay = ballRangeDisplay
	
	local function newSize(s)
		game:GetService("TweenService"):Create(TBallRangeDisplay, TweenInfo.new(0.75), {Size = Vector3.new(s, s, s)}):Play()
	end
	
	local ballIncomingSound = Instance.new("Sound")
	ballIncomingSound.SoundId = "rbxassetid://9113880610"
	ballIncomingSound.Parent = Character.HumanoidRootPart
	ballIncomingSound.Volume = 1.5
	
	ballIncomingSound:Play()
	
	Character.ChildRemoved:Connect(function(obj)
		if obj.Name == "Highlight" then
			canParry = true
		end
	end)
	RunService.RenderStepped:Connect(function()
		if Character:FindFirstChild("HumanoidRootPart") and Character:FindFirstChild("Head") then
			local Ball = FindBall()
			local OtherBall = FindOtherBall()
			
			if Ball then
				if not Ball:FindFirstChild("PredictionValue") then
					tag = Instance.new("BillboardGui")
					tag.Parent = Ball
					tag.Size = UDim2.new(15,0,3,0)
					tag.ExtentsOffset = Vector3.new(0,2.25,0)
					label = Instance.new("TextLabel")
					label.Parent = tag
					label.Size = UDim2.new(1,0,1,0)
					label.BackgroundTransparency = 1
					label.TextScaled = true
					label.TextStrokeTransparency = 0
					label.TextColor3 = Color3.fromRGB(255, 255, 255)
					label.Text = "0"
					tag.Name = "PredictionValue"
					
					Saved.LastBallPosition = Ball.Position
					
					if Saved.LastTracer ~= nil then
						Saved.LastTracer:Destroy()
					end
					
					local Tracer = Drawing.new("Line")
					Tracer.Visible = false
					Tracer.Color = Color3.new(1, 1, 1)
					Tracer.Thickness = 1
					Tracer.Transparency = 1
					
					Saved.LastTracer = Tracer
					
					function line()
						game:GetService("RunService").RenderStepped:Connect(function()
							if Ball and Ball ~= nil then
								local Vector = game:GetService("Workspace").CurrentCamera:worldToViewportPoint(Ball.Position)
								
								Tracer.From = Vector2.new(game:GetService("Workspace").CurrentCamera.ViewportSize.X / 2, game:GetService("Workspace").CurrentCamera.ViewportSize.Y / 1.85)
								Tracer.To = Vector2.new(Vector.X, Vector.Y)
									
								Tracer.Visible = true
							else
								Tracer.Visible = false
							end
						end)
					end
					coroutine.wrap(line)()
				end
				
				local TCL = (#game:GetService("Workspace"):GetDescendants() / 1000) / 2.5
				local Delta = (os.clock() - Saved.LastTick) * 22.25
				if Delta > 1 then Delta = 1 end
			
				local xVelocity = Ball.Velocity.X / Delta
				local yVelocity = Ball.Velocity.Y / Delta
				local zVelocity = Ball.Velocity.Z / Delta
				local totalVelocity = math.abs(math.sqrt(xVelocity^2 + yVelocity^2 + zVelocity^2)) / 10
				if totalVelocity < 11.25 then totalVelocity = totalVelocity + (10 - totalVelocity) end
				
				newSize(totalVelocity)
				TBallRangeDisplay.CFrame = Character:FindFirstChild("HumanoidRootPart").CFrame
				
				local PlayerPosition = LocalPlayer.Character.Head.Position
				local Distance
				if not OtherBall then
					Distance = (Ball.Position - PlayerPosition).Magnitude
					
					if Saved.CurrentMethod ~= "Focused" then
						Saved.CurrentMethod = "Focused"
						print("method - focused")
					end
				else
					Distance = (PlayerPosition - OtherBall.Position).Magnitude
					
					if Saved.CurrentMethod ~= "Universal" then
						Saved.CurrentMethod = "Universal"
						print("method - universal")
					end
				end
				
				if Ball:GetAttribute("target") == LocalPlayer.Name or Character:FindFirstChild("Highlight") then	
	       			local PingAccountability = game.Stats.Network.ServerStatsItem["Data Ping"]:GetValue() / 925
	       			local IRL = (settings().Network.IncomingReplicationLag) + 0.825			
	       			local Prediction = ((totalVelocity + 10) + (PingAccountability * 20)) + IRL
	       			Prediction = ((Prediction * 1.325) + (TCL / 1.425)) / 1.117625
	       			Prediction = .975 * Prediction
				Prediction *= 1.25
	       			
	       			newSize(Prediction)
	       				
	       			Ball.PredictionValue.TextLabel.Text = "%"..tostring(Prediction)
	       			
	       			Saved.LastTracer.Color = Color3.new(0.7, 0, 0)
	       				
	       			if Distance <= Prediction * 2 then if Distance <= Prediction * 1.125 then if not ballIncomingSound.IsPlaying then ballIncomingSound:Play() end end if canParry then Ball.PredictionValue.TextLabel.TextColor3 = Color3.fromRGB(235, 180, 45) end if Distance > Prediction * 1.25 then Ball.PredictionValue.TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255) end end
	       			if Distance <= (Prediction / 1.025) then
	       				if canParry then
	       					Ball.PredictionValue.TextLabel.TextColor3 = Color3.fromRGB(145, 10, 10)
	       					
	       					if Saved.CurrentMethod == "Focused" then
	       						AttemptParry()
	       					elseif Saved.CurrentMethod == "Universal" then
	       						AttemptParry()
	       					end
	       					canParry = false
	       				else
	       					if Distance <= 25 then
	       						if Distance <= 16.75 then
	       							canParry = true
	       							print("can now parry, distance: "..tostring(Distance))
	       						end
	       					end
	       				end
	       			end
	       			
	       			Saved.LastBallPosition = Ball.Position
	       			Saved.LastPrediction = Prediction
	       		else
	       			if Distance <= Saved.LastPrediction * 1.5 then
	       				Ball.PredictionValue.TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	       			end
	       			
	       			Saved.LastTracer.Color = Color3.new(1, 1, 1)
	       			
       				Ball.PredictionValue.TextLabel.Text = "%"..tostring(totalVelocity)
				end
			else
				if Saved.LastTracer ~= nil then
					Saved.LastTracer:Destroy()
				end
			end
			
			Saved.LastTick = os.clock()
		end
	end)
end
LocalPlayer.CharacterAdded:Connect(function(Character)
	setup(Character)
end)
setup(LocalPlayer.Character)

getgenv().executed = true
