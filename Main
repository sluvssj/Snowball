-- Snowball Auto Parry [@dtbsnt]

getgenv().AIAbilities = true

if getgenv().executed then return end
settings().Physics.AllowSleep = false

local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local LocalPlayer = game:GetService("Players").LocalPlayer
local Balls = game:GetService("Workspace").Balls

local ballRangeDisplay = nil
local ballRange = 0

local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local Hotbar = PlayerGui:WaitForChild("Hotbar")

local uigrad1 = Hotbar.Block.border1.UIGradient
local uigrad2 = Hotbar.Ability.border2.UIGradient

local closeClashes = 0

local canParry = true
local wasAttempted = false

local function isCooldownInEffect(uigradient)
    return uigradient.Offset.Y < 0.495
end

local function notify(txt)
	game:GetService("StarterGui"):SetCore("SendNotification",{
       Title = "Snowball",
       Icon = string.format("rbxthumb://type=Asset&id=%s&w=420&h=420", "14968422803"),
       Text = txt,
       Duration = 2
    })
end

function FindBall()
    local RealBall

    for i, v in pairs(Balls:GetChildren()) do
        if v:GetAttribute("realBall") == true then
            RealBall = v
        end
    end
    return RealBall
end
function FindOtherBall()
    local OtherBall

    for i, v in pairs(Balls:GetChildren()) do
        if v:GetAttribute("realBall") ~= true then
            OtherBall = v
        end
    end
    return OtherBall
end
local function findBallsTarget()
	local Ball = FindBall()
	
	for i,v in pairs(game.Workspace.Alive:GetChildren()) do
		if Ball:GetAttribute("target") == v.Name and v:FindFirstChild("Highlight") then
			return v
		end
	end
end

local Saved = {
	LastTick = os.clock();
	LastBallPosition = nil;
	LastPrediction = 0;
	LastTracer = nil;
	LastTarget = nil;
	InClashWith = nil;
	LastHitDistance = 0;
	UsedAbility = false;
	CurrentMethod = "Universal";
	inClash = false;
};

local abilityButtonPress = ReplicatedStorage.Remotes.AbilityButtonPress
local function AttemptParry()
	ReplicatedStorage.Remotes.ParryButtonPress:Fire()
end

local function setup(Character)
	Character:WaitForChild("HumanoidRootPart")
	if ballRangeDisplay then ballRangeDisplay:Destroy() end
	ballRangeDisplay = Instance.new("Part")
	
	local didDie = false
	
	local Connection
	
	local function endClash()
		Saved.inClash = false
		canParry = true
			       							
		Saved.InClashWith = nil
			       							
		notify("Clash Ended")
	end
	
	Character:WaitForChild("Humanoid").Died:Connect(function()
		didDie = true
		
		Connection:Disconnect()
		
		if Saved.inClash then
			endClash()
		end
	end)
	
	ballRangeDisplay.Material = Enum.Material.ForceField
	ballRangeDisplay.Transparency = 0.825
	ballRangeDisplay.CanCollide = false
	ballRangeDisplay.Size = Vector3.new(5,5,5)
	ballRangeDisplay.Color = Color3.fromRGB(255,255,255)
	ballRangeDisplay.Shape = Enum.PartType.Ball
	
	ballRangeDisplay.Parent = game:GetService("Workspace")
	local TBallRangeDisplay = ballRangeDisplay
	
	local function newSize(s)
		game:GetService("TweenService"):Create(TBallRangeDisplay, TweenInfo.new(0.75), {Size = Vector3.new(s, s, s)}):Play()
	end
	
	Character.ChildRemoved:Connect(function(obj)
		if obj.Name == "Highlight" then
			canParry = true
		end
	end)
	Connection = RunService.RenderStepped:Connect(function()
		if Character:FindFirstChild("HumanoidRootPart") and Character:FindFirstChild("Head") and not didDie then
			local Ball = FindBall()
			local OtherBall = FindOtherBall()
			
			if Ball then
				if not Ball:FindFirstChild("PredictionValue") then
					tag = Instance.new("BillboardGui")
					tag.Parent = Ball
					tag.Size = UDim2.new(5,0,3,0)
					tag.ExtentsOffset = Vector3.new(0,3,0)
					label = Instance.new("TextLabel")
					label.Parent = tag
					label.Size = UDim2.new(1,0,1,0)
					label.BackgroundTransparency = 1
					label.TextScaled = true
					label.TextStrokeTransparency = 0
					label.TextColor3 = Color3.fromRGB(255, 255, 255)
					label.Text = "0"
					tag.Name = "PredictionValue"
					
					if not Character.Head:FindFirstChild("LogicUI") then
						logic_tag = Instance.new("BillboardGui")
						logic_tag.Parent = Character.Head
						logic_tag.Size = UDim2.new(15,0,3,0)
						logic_tag.ExtentsOffset = Vector3.new(0,2.25,0)
						new_label = Instance.new("TextLabel")
						new_label.Parent = logic_tag
						new_label.Size = UDim2.new(1,0,1,0)
						new_label.BackgroundTransparency = 1
						new_label.TextScaled = true
						new_label.TextStrokeTransparency = 0
						new_label.TextColor3 = Color3.fromRGB(255, 255, 255)
						new_label.Text = "0"
						logic_tag.Name = "LogicUI"
						logic_tag.Enabled = false
					end
					
					Saved.LastBallPosition = Ball.Position
					
					if Saved.LastTracer ~= nil then
						Saved.LastTracer:Destroy()
					end
					
					local Tracer = Drawing.new("Line")
					Tracer.Visible = false
					Tracer.Color = Color3.new(1, 1, 1)
					Tracer.Thickness = 1
					Tracer.Transparency = 1
					
					if Saved.LastTracer then
						Saved.LastTracer.Color = Color3.new(1, 1, 1)
					end
					
					Saved.LastTracer = Tracer
					
					Saved.inClash = false
					Saved.UsedAbility = false
					Saved.LastHitDistance = 0
					closeClashes = 0
					canParry = true
					
					function line()
						game:GetService("RunService").RenderStepped:Connect(function()
							if Ball and Ball ~= nil then
								local Vector = game:GetService("Workspace").CurrentCamera:worldToViewportPoint(Ball.Position)
								
								Tracer.From = Vector2.new(game:GetService("Workspace").CurrentCamera.ViewportSize.X / 2, game:GetService("Workspace").CurrentCamera.ViewportSize.Y / 1.85)
								Tracer.To = Vector2.new(Vector.X, Vector.Y)
									
								Tracer.Visible = true
							else
								Tracer.Visible = false
							end
						end)
					end
					coroutine.wrap(line)()
				end
				
				local TCL = (#game:GetService("Workspace"):GetDescendants() / 1000) / 2.5
				local Delta = (os.clock() - Saved.LastTick) * 22.5
				if Delta > 1 then Delta = 1 end
				
				local Logic = math.abs(Ball.Position.Y - Saved.LastBallPosition.Y^1.5) / 100
				if Logic > 0.8725 then Logic = 0.8725 end
				
				if Character.Head:FindFirstChild("LogicUI") then
					Character.Head.LogicUI.TextLabel.Text = tostring(Logic)
				end
			
				local xVelocity = Ball.Velocity.X / Delta
				local yVelocity = Ball.Velocity.Y / Delta
				local zVelocity = Ball.Velocity.Z / Delta
				local totalVelocity = math.abs(math.sqrt(xVelocity^2 + yVelocity^2 + zVelocity^2)) / 10
				local realVelocity = Ball.Velocity.Magnitude
				if totalVelocity < 11.5 then totalVelocity = 11.25 end
				
				newSize(totalVelocity)
				TBallRangeDisplay.CFrame = Character:FindFirstChild("HumanoidRootPart").CFrame
				
				local PlayerPosition = Vector3.new(0, 0, 0)
				if LocalPlayer.Character:FindFirstChild("Head") then
					PlayerPosition = LocalPlayer.Character:FindFirstChild("Head").Position
				end
				
				local Distance
				if Ball then
					Distance = ((Ball.Position + Ball.Velocity) - PlayerPosition).Magnitude
					NormalDistance = (Ball.Position - PlayerPosition).Magnitude
					Distance = NormalDistance + (Distance / 200)
					
					if Saved.CurrentMethod ~= "Focused" then
						Saved.CurrentMethod = "Focused"
						notify("New Method - Focused")
					end
				end
				if Saved.LastHitDistance == 0 then Saved.LastHitDistance = Distance end
				
				local MovingLogic = Character.Humanoid.MoveDirection
				MovingLogic = (MovingLogic.X + MovingLogic.Y + MovingLogic.Z) / 1.75
				
				if Character:FindFirstChild("Highlight") or Ball.BrickColor == BrickColor.new("Really red") then	
	       			local PingAccountability = game.Stats.Network.ServerStatsItem["Data Ping"]:GetValue() / 950
	       			local IRL = (settings().Network.IncomingReplicationLag) + 0.0825
	       			local Prediction = ((totalVelocity + 15) + (PingAccountability * 20)) + IRL
	       			Prediction = ((Prediction * 1.325) + (TCL / 1.5)) / 1.117625
	       			Prediction -= Logic * 1.15
	       			
	       			newSize(Prediction)
	       			
	       			Ball.PredictionValue.TextLabel.Text = "%"..tostring(Prediction)
	       			
	       			Saved.LastTracer.Color = Color3.new(0.75, 0, 0)
	       				
	       			if Distance <= Prediction * 2 then if canParry then Ball.PredictionValue.TextLabel.TextColor3 = Color3.fromRGB(235, 180, 45) end if Distance > Prediction * 1.25 then Ball.PredictionValue.TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255) end end
	       			if Distance <= ((Prediction  / 1.0825) - MovingLogic) + 0.25 or Saved.inClash then
	       				if realVelocity > 1.1725 then
	       					if canParry or Saved.inClash then
		       					Ball.PredictionValue.TextLabel.TextColor3 = Color3.fromRGB(145, 10, 10)
		       						
		       					local didAttempt = false
		       					
		       					if not isCooldownInEffect(uigrad1) or Saved.inClash then
									local abilityIsOnCooldown = isCooldownInEffect(uigrad2)

									local function Parry()
										if not Saved.UsedAbility then
											AttemptParry()
	
											wasAttempted = false
											canParry = false
											didAttempt = true
										end
									end

									if not Saved.inClash then
										if getgenv().AIAbilities then
											if not abilityIsOnCooldown then
												if Character.Abilities["Raging Deflection"].Enabled or Character.Abilities["Rapture"].Enabled then
													abilityButtonPress:Fire()
													Saved.UsedAbility = true
												else
													if uigrad2.Offset.Y < .5 then
														if uigrad2.Offset.Y < .425 then
															Parry()
														end
													else
														Parry()
													end
												end
											else
												Parry()
											end
										else
											Parry()
										end
									else
										Parry()
									end
			       					
			       					Saved.LastHitDistance = Distance
			       				else
			       					if not isCooldownInEffect(uigrad2) then
			       						if getgenv().AIAbilities and Ball.BrickColor == BrickColor.new("Really red") then
			       							 if Character.Abilities["Raging Deflection"].Enabled or Character.Abilities["Rapture"].Enabled or Character.Abilities["Telekinesis"].Enabled or Character.Abilities["Platform"].Enabled or Character.Abilities["Invisibility"].Enabled or Character.Abilities["Forcefield"].Enabled or Character.Abilities["Freeze"].Enabled or Character.Abilities["Super Jump"].Enabled then
			       							 	if Character.Abilities["Invisibility"].Enabled then
			       							 		if #game.Workspace.Alive:GetChildren() > 2 then
			       							 			abilityButtonPress:Fire()
			       							 			Saved.UsedAbility = true
			       							 			
			       							 			Saved.LastHitDistance = Distance
			       							 		end
			       							 	else
			       							 		abilityButtonPress:Fire()
			       							 		Saved.UsedAbility = true
			       							 		
			       							 		Saved.LastHitDistance = Distance
			       							 	end
			       							 end
			       						end
            						end
		       					end
		       					
		       					if didAttempt then
		       						if Distance < 30 then
		       							if not isCooldownInEffect(uigrad1) then
		       								closeClashes += 1
			       						
				       						if closeClashes >= 5 then
				       							if not Saved.inClash then
				       								Saved.inClash = true
				       								
				       								if Saved.LastTarget ~= nil then
				       									Saved.InClashWith = Saved.LastTarget
				       								end
				       								
				       								notify("Entered Clash with ", game.Players:GetPlayerFromCharacter(Saved.LastTarget).DisplayName or "N/A")
				       							end
				       						end
		       							end
			       					else
			       						closeClashes = 0
			       						
			       						if Saved.inClash then
			       							Saved.inClash = false
			       							canParry = true
			       							
			       							Saved.InClashWith = nil
			       							
			       							notify("Clash Ended")
			       						end
			       					end
		       					end
			       			else
			       				if Distance <= 25 then
			       					if Distance < 15 then
			       						canParry = true
			       						wasAttempted = true
			       						
			       						if realVelocity < 50 then
			       							closeClashes = 0
			       						end
			       					end
								end
		       				end
		       			else
		       				closeClashes = 0
	       				end
	       			else
	       				closeClashes = 0
	       			end
	       			
	       			Saved.LastBallPosition = Ball.Position
	       			Saved.LastPrediction = Prediction
	       		else
	       			if Distance <= Saved.LastPrediction * 1.5 then
	       				Ball.PredictionValue.TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	       			end
	       			
	       			Saved.LastTracer.Color = Color3.new(1, 1, 1)
	       			
	       			if Saved.UsedAbility then
	       				Saved.UsedAbility = false
	       			end
	       			local oldTarget = Saved.LastTarget
	       			Saved.LastTarget = findBallsTarget()
	       			if oldTarget ~= Saved.LastTarget then
	       				if Saved.LastTarget then
	       					print("new target -", Saved.LastTarget.Name)
	       					
	       					if Saved.inClash then
	       						if Saved.LastTarget ~= Saved.InClashWith then
	       							endClash()
	       						end
	       					end
	       				end
	       			end
	       			
       				Ball.PredictionValue.TextLabel.Text = "%"..tostring(totalVelocity)
				end
			else
				if Saved.LastTracer ~= nil then
					Saved.LastTracer:Destroy()
				end
			end
			
			Saved.LastTick = os.clock()
		end
	end)
end

getgenv().version = "0.0.3"
LocalPlayer.CharacterAdded:Connect(function(Character)
	setup(Character)
end)
setup(LocalPlayer.Character)
notify("Loaded, v"..getgenv().version.." | Mode - "..Saved.CurrentMethod)
getgenv().executed = true
